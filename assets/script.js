const socket = io("https://simpleonlinechat.onrender.com");
// const socket = io();
const messages = document.querySelector(".messages");
const form = document.querySelector(".form");
const input = document.querySelector(".input");
const nameBlock = document.querySelector(".name");
const preparedMediaIndicator = document.getElementById(
  "preparedMediaIndicator"
);
const preparedMediaIcon = document.getElementById("preparedMediaIcon");

const username = prompt("–í–∞—à–µ –∏–º—è:");
// const username = "daun";
nameBlock.innerHTML = `${username}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML (–≤–∞–∂–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!)
function sanitizeHTML(text) {
  let map = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#039;",
  };

  return text.replace(/[&<>"']/g, function (m) {
    return map[m];
  });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
let preparedMediaHTML = "";

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–¥–∏–∞)
form.addEventListener("submit", function (event) {
  event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

  let messageText = input.value;

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–¥–∏–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
  const fullMessage = messageText + "<br>" + preparedMediaHTML;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  socket.emit("chat message", { message: fullMessage, name: username });
  input.value = ""; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  removePreparedMedia(); // –û—á–∏—â–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–¥–∏–∞
});

// –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
socket.on("chat message", function (data) {
  const item = document.createElement("li");
  item.innerHTML = `<span>${data.name}</span>: ${data.message}`;
  messages.appendChild(item);
  window.scrollTo(0, document.body.scrollHeight);
});

// ***********************************************************
// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞ (–Ω–æ–≤—ã–π –∫–æ–¥)
// ***********************************************************

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal() {
  document.getElementById("mediaModal").style.display = "flex";
}

function closeModal() {
  document.getElementById("mediaModal").style.display = "none";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ URL –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
function toggleFileInput() {
  const mediaType = document.getElementById("mediaType").value;
  const urlInputContainer = document.getElementById("mediaUrl");
  const fileInputContainer = document.getElementById("fileInputContainer");
  const widthLabel = document.querySelector('label[for="mediaWidth"]');
  const widthInput = document.getElementById("mediaWidth");

  if (mediaType === "image" || mediaType === "video") {
    urlInputContainer.style.display = "block";
    fileInputContainer.style.display = "none";
    widthLabel.style.display = "block";
    widthInput.style.display = "block";
  } else if (
    mediaType === "image-upload" ||
    mediaType === "video-upload" ||
    mediaType === "audio-upload"
  ) {
    urlInputContainer.style.display = "none";
    fileInputContainer.style.display = "block";
    widthLabel.style.display = "block";
    widthInput.style.display = "block";
  } else {
    urlInputContainer.style.display = "block";
    fileInputContainer.style.display = "none";
    widthLabel.style.display = "none";
    widthInput.style.display = "none";
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–µ–¥–∏–∞
function prepareMedia() {
  const mediaType = document.getElementById("mediaType").value;
  const widthInput = document.getElementById("mediaWidth");
  const widthContent = widthInput.value;

  let mediaHTML = "";

  if (mediaType === "image") {
    const mediaUrl = document.getElementById("mediaUrl").value;
    mediaHTML = `<img src="${mediaUrl}" width="${widthContent}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">`;
  } else if (mediaType === "video") {
    const mediaUrl = document.getElementById("mediaUrl").value;

    mediaHTML = `<div class="video-container"><iframe src="${mediaUrl}" frameborder="0" allowfullscreen></iframe></div>`;
  } else if (mediaType === "audio") {
    const mediaUrl = document.getElementById("mediaUrl").value;
    mediaHTML = `<audio controls src="${mediaUrl}"></audio>`;
  } else if (mediaType === "image-upload") {
    const mediaFile = document.getElementById("mediaFile").files[0];
    if (mediaFile) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const imageUrl = e.target.result;
        mediaHTML = `<img src="${imageUrl}" width="${widthContent}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">`;
        preparedMediaHTML = mediaHTML;
        updatePreparedMediaIndicator(mediaType);
        closeModal();
      };
      reader.onerror = function (error) {
        console.error("FileReader error:", error);
      };
      reader.readAsDataURL(mediaFile);
      return;
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª");
      return;
    }
  } else if (mediaType === "audio-upload") {
    const mediaFile = document.getElementById("mediaFile").files[0];
    if (mediaFile) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const audioUrl = e.target.result;
        mediaHTML = `<audio controls src="${audioUrl}"></audio>`;
        preparedMediaHTML = mediaHTML;
        updatePreparedMediaIndicator(mediaType);
        closeModal();
      };
      reader.onerror = function (error) {
        console.error("FileReader error:", error);
      };
      reader.readAsDataURL(mediaFile);
      return;
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª");
      return;
    }
  } else if (mediaType === "video-upload") {
    const mediaFile = document.getElementById("mediaFile").files[0];
    console.log("video-upload start");
    console.log(mediaFile);
    if (mediaFile) {
      console.log("video-upload mediaFile is TRUE");
      const reader = new FileReader();
      reader.onload = function (e) {
        const videoUrl = e.target.result;
        console.log("video-upload e", e);
        console.log("video-upload videoUrl", videoUrl);
        mediaHTML = `<div class="video-container">
                         <video controls>
                           <source src="${videoUrl}" type="${mediaFile.type}">
                         </video>
                       </div>`;
        preparedMediaHTML = mediaHTML;
        updatePreparedMediaIndicator(mediaType);
        closeModal();
      };
      reader.onerror = function (error) {
        console.error("FileReader error:", error);
      };
      console.log("video-upload before reader.readAsDataURL");
      reader.readAsDataURL(mediaFile);
      console.log("video-upload after reader.readAsDataURL");
      return;
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª");
      return;
    }
  }

  preparedMediaHTML = mediaHTML;
  updatePreparedMediaIndicator(mediaType);
  closeModal();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞
function updatePreparedMediaIndicator(mediaType) {
  preparedMediaIndicator.style.display = "flex";
  if (mediaType === "image") {
    preparedMediaIcon.textContent = "üñºÔ∏è"; // Image icon
  } else if (mediaType === "image-upload") {
    preparedMediaIcon.textContent = "üñºÔ∏è"; // Image icon
  } else if (mediaType === "video") {
    preparedMediaIcon.textContent = "üé¨"; // Video icon
  } else if (mediaType === "video-upload") {
    preparedMediaIcon.textContent = "üé¨"; // Video icon
  } else if (mediaType === "audio") {
    preparedMediaIcon.textContent = "üéµ"; // Audio icon
  } else if (mediaType === "audio-upload") {
    preparedMediaIcon.textContent = "üéµ"; // Audio icon
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞
function removePreparedMedia() {
  preparedMediaHTML = "";
  preparedMediaIndicator.style.display = "none";
}

// –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function (event) {
  const modal = document.getElementById("mediaModal");
  if (event.target == modal) {
    modal.style.display = "none";
  }
};

// Call toggleFileInput to initialize the visibility of the input fields
toggleFileInput();
