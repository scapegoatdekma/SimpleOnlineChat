const socket = io("https://simpleonlinechat.onrender.com");
// const socket = io();
const messages = document.querySelector(".messages");
const form = document.querySelector(".form");
const input = document.querySelector(".input");
const nameBlock = document.querySelector(".name");
const preparedMediaIndicator = document.getElementById(
  "preparedMediaIndicator"
);
const preparedMediaIcon = document.getElementById("preparedMediaIcon");

const username = prompt("–í–∞—à–µ –∏–º—è:");
nameBlock.innerHTML = `${username}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML (–≤–∞–∂–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!)
function sanitizeHTML(text) {
  let map = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#039;",
  };

  return text.replace(/[&<>"']/g, function (m) {
    return map[m];
  });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
let preparedMediaHTML = "";

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
let allMessages = [];

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ–¥–∏–∞)
form.addEventListener("submit", function (event) {
  event.preventDefault();
  let messageText = input.value.trim(); // –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  if (messageText !== "") {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    let fullMessage = messageText; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (preparedMediaHTML) {
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      fullMessage += "<br>" + preparedMediaHTML;
    }

    const newMessage = {
      name: username,
      message: fullMessage,
    };

    allMessages.push(newMessage);
    addMessagesToPage(allMessages);

    socket.emit("chat message", {
      message: fullMessage,
      name: username,
    });
    input.value = "";
    removePreparedMedia();
  }
});

// –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
socket.on("chat message", function (data) {
  if (data.name !== username) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –Ω–∞—Å
    const isDuplicate = allMessages.some(
      (existingMessage) => existingMessage.id === data.id
    );
    if (!isDuplicate) {
      allMessages.push(data); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
      addMessagesToPage(allMessages); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    }
  }
});

// ***********************************************************
// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞ (–Ω–æ–≤—ã–π –∫–æ–¥)
// ***********************************************************

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openModal() {
  document.getElementById("mediaModal").style.display = "flex";
}

function closeModal() {
  document.getElementById("mediaModal").style.display = "none";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ URL –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
function toggleFileInput() {
  const mediaType = document.getElementById("mediaType").value;
  const urlInputContainer = document.getElementById("mediaUrl");
  const fileInputContainer = document.getElementById("fileInputContainer");

  if (
    mediaType === "image-upload" ||
    mediaType === "audio-upload" ||
    mediaType === "video-upload"
  ) {
    urlInputContainer.style.display = "none";
    fileInputContainer.style.display = "block";
  } else {
    urlInputContainer.style.display = "block";
    fileInputContainer.style.display = "none";
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–µ–¥–∏–∞
function prepareMedia() {
  const mediaType = document.getElementById("mediaType").value;
  const widthInput = document.getElementById("mediaWidth");
  const widthContent = widthInput.value;

  let mediaHTML = "";

  if (mediaType === "image") {
    const mediaUrl = document.getElementById("mediaUrl").value;
    mediaHTML = `<img src="${mediaUrl}" width="${widthContent}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">`;
  } else if (mediaType === "video") {
    const mediaUrl = document.getElementById("mediaUrl").value;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ YouTube
    if (mediaUrl.includes("youtube.com") || mediaUrl.includes("youtu.be")) {
      // –ü–æ–ª—É—á–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ —Å—Å—ã–ª–∫–∏ YouTube
      const videoId = getYoutubeVideoId(mediaUrl);
      if (videoId) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube
        mediaHTML = `<div class="video-container">
                         <iframe src="https://www.youtube.com/embed/${videoId}" frameborder="0" allowfullscreen></iframe>
                       </div>`;
      } else {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–∏–¥–µ–æ YouTube –∏–∑ —Å—Å—ã–ª–∫–∏");
        return;
      }
    } else {
      // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞ YouTube, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –∫–∞–∫ –µ—Å—Ç—å (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª)
      mediaHTML = `<div class="video-container">
                         <iframe width="${widthContent}" src="${mediaUrl}" frameborder="0" allowfullscreen></iframe>
                       </div>`;
    }
  } else if (mediaType === "audio") {
    const mediaUrl = document.getElementById("mediaUrl").value;
    mediaHTML = `<audio controls src="${mediaUrl}"></audio>`;
  } else if (mediaType === "image-upload") {
    const mediaFile = document.getElementById("mediaFile").files[0];
    if (mediaFile) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const imageUrl = e.target.result;
        mediaHTML = `<img src="${imageUrl}" width="${widthContent}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">`;
        preparedMediaHTML = mediaHTML;
        updatePreparedMediaIndicator(mediaType);
        closeModal();
      };
      reader.onerror = function (error) {
        console.error("FileReader error:", error);
      };
      reader.readAsDataURL(mediaFile);
      return;
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª");
      return;
    }
  } else if (mediaType === "audio-upload") {
    const mediaFile = document.getElementById("mediaFile").files[0];
    if (mediaFile) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const audioUrl = e.target.result;
        mediaHTML = `<audio controls src="${audioUrl}"></audio>`;
        preparedMediaHTML = mediaHTML;
        updatePreparedMediaIndicator(mediaType);
        closeModal();
      };
      reader.onerror = function (error) {
        console.error("FileReader error:", error);
      };
      reader.readAsDataURL(mediaFile);
      return;
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª");
      return;
    }
  } else if (mediaType === "video-upload") {
    const mediaFile = document.getElementById("mediaFile").files[0];
    if (mediaFile) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const videoUrl = e.target.result;
        mediaHTML = `<div class="video-container">
                         <video controls>
                           <source src="${videoUrl}" type="${mediaFile.type}">
                         </video>
                       </div>`;
        preparedMediaHTML = mediaHTML;
        updatePreparedMediaIndicator(mediaType);
        closeModal();
      };
      reader.onerror = function (error) {
        console.error("FileReader error:", error);
      };
      reader.readAsDataURL(mediaFile);
      return;
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª");
      return;
    }
  }

  preparedMediaHTML = mediaHTML;
  updatePreparedMediaIndicator(mediaType);
  closeModal();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ –∏–∑ —Å—Å—ã–ª–∫–∏ YouTube
function getYoutubeVideoId(url) {
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ –∏–∑ —Å—Å—ã–ª–∫–∏ YouTube
  const regExp =
    /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);
  return match && match[2].length === 11 ? match[2] : null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞
function updatePreparedMediaIndicator(mediaType) {
  preparedMediaIndicator.style.display = "inline-block";
  if (mediaType === "image") {
    preparedMediaIcon.textContent = "üñºÔ∏è"; // Image icon
  } else if (mediaType === "image-upload") {
    preparedMediaIcon.textContent = "üñºÔ∏è"; // Image icon
  } else if (mediaType === "video") {
    preparedMediaIcon.textContent = "üé¨"; // Video icon
  } else if (mediaType === "video-upload") {
    preparedMediaIcon.textContent = "üé¨"; // Video icon
  } else if (mediaType === "audio") {
    preparedMediaIcon.textContent = "üéµ"; // Audio icon
  } else if (mediaType === "audio-upload") {
    preparedMediaIcon.textContent = "üéµ"; // Audio icon
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞
function removePreparedMedia() {
  preparedMediaHTML = "";
  preparedMediaIndicator.style.display = "none";
}

// –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function (event) {
  const modal = document.getElementById("mediaModal");
  if (event.target == modal) {
    modal.style.display = "none";
  }
};

// Call toggleFileInput to initialize the visibility of the input fields
toggleFileInput();

let messagesPerPage = 5;
let loadMoreButton;
let allMessagesLoaded = false;
let lastMessageId = null; // ID —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

function loadHistory() {
  if (allMessagesLoaded) {
    return;
  }
  socket.emit("get history", lastMessageId);
}

function createLoadMoreButton() {
  const header = document.querySelector(".header");
  loadMoreButton = document.createElement("button");
  loadMoreButton.textContent = "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ";
  loadMoreButton.addEventListener("click", loadHistory);
  header.appendChild(loadMoreButton); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ header
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
function addMessagesToPage(messagesData) {
  console.log("addMessagesToPage called with:", messagesData);
  messages.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  const fragment = document.createDocumentFragment();

  messagesData.forEach((message) => {
    const item = document.createElement("li");
    item.innerHTML = `<span>${message.name}</span>: ${message.message}`;
    fragment.appendChild(item);
  });

  messages.appendChild(fragment);
}

socket.on("history", function (data) {
  console.log("history event received with data:", data);

  if (data.length < messagesPerPage) {
    allMessagesLoaded = true;
  }

  //–£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const newMessages = data.filter(
    (newMessage) =>
      !allMessages.some(
        (existingMessage) => existingMessage.id === newMessage.id
      )
  );

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  allMessages = allMessages.concat(newMessages);

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ id (–≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è)
  allMessages.sort((a, b) => a.id - b.id);

  addMessagesToPage(allMessages); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lastMessageId
  if (data.length > 0) {
    // –ù–∞—Ö–æ–¥–∏–º ID —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ)
    lastMessageId = data[0].id; // ID —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
  if (
    data.length === messagesPerPage &&
    !loadMoreButton &&
    !allMessagesLoaded
  ) {
    createLoadMoreButton();
  } else if (allMessagesLoaded && loadMoreButton) {
    loadMoreButton.remove();
    loadMoreButton = null;
  }
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
loadHistory();
addMessagesToPage(allMessages); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
